name: Test Workflow
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Publish JUnit test results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: junit-test-results
        path: target/surefire-reports/*.xml
        
  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '11'

    - name: Build with Maven
      run: ./mvnw package
    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USER }}
      run: |
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        scp -o StrictHostKeyChecking=no -i private_key.pem -r ./docker-compose.yaml $USER@$HOST:/home/ec2-user
        scp -o StrictHostKeyChecking=no -i private_key.pem -r ./target/testing-web-complete-0.0.1-SNAPSHOT.jar $USER@$HOST:/home/ec2-user
        scp -o StrictHostKeyChecking=no -i private_key.pem -r ./Dockerfile $USER@$HOST:/home/ec2-user
        rm -f private_key.pem
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USER }}
      run: |
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST << 'EOF'
          cd /home/ec2-user
          docker-compose build
          docker-compose up -d
        EOF
        rm -f private_key.pem
